var search_data = {"index":{"searchIndex":["movieload","load_data()","most_similar()","new()","popularity()","popularity_list()","read_lines()","similarity()"],"longSearchIndex":["movieload","movieload#load_data()","movieload#most_similar()","movieload::new()","movieload#popularity()","movieload#popularity_list()","movieload#read_lines()","movieload#similarity()"],"info":[["MovieLoad","","MovieLoad.html","","<p>MovieLoad will load and store given information, while also being able to\ngive out values of similarity …\n"],["load_data","MovieLoad","MovieLoad.html#method-i-load_data","(file_name)","<p>load_data wll load the data of the given file name\n"],["most_similar","MovieLoad","MovieLoad.html#method-i-most_similar","(user)",""],["new","MovieLoad","MovieLoad.html#method-c-new","()",""],["popularity","MovieLoad","MovieLoad.html#method-i-popularity","(movie_id)","<p>popularity will determine the popularity of a movie based on average user\nrating, and the total # of …\n"],["popularity_list","MovieLoad","MovieLoad.html#method-i-popularity_list","()","<p>popularity_list returns a list of all movies sorted by their popularity\n"],["read_lines","MovieLoad","MovieLoad.html#method-i-read_lines","(file_data)","<p>read_lines helps store the data of the file when reading each line\n"],["similarity","MovieLoad","MovieLoad.html#method-i-similarity","(user1, user2)","<p>similarity will find out how similar 2 users are in movie preference based\non the movies they watched(value …\n"]]}}